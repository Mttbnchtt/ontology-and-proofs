flowchart LR
    step3["Step 3"] -- has subject --> segmentAC["Segment AC"]
    step3 -- has predicate --> is_produced_to["is produced to"]
    step3 -- has object --> segmentAE["Segment AE"]
    step3 -- is in proof --> proofEuclid["Euclid's proof"]
    step3 -- has immediate antencedent --> step2["Step 2"]
    step3--involves a constrction-->true["True"]
    step2 -- has immediate antencedent --> step1["Step 1"]
    step1 -- has immediate antencedent --> step0["Step 0"]
    proofEuclid -- proves --> theorem["The angles at the base of an isosceles triangle are equal one to the other"]
    proofEuclid -- has goal --> goal["Goal"]
    goal -- has subject --> rotationABC["Amount of rotation of rectilinear angle ABC"]
    goal -- has predicate --> equivalent_amount["is equivalent amount as"]
    goal -- has object --> rotationACB["Amount of rotation of rectilinear angle ACB"]
    segmentAC -- is a --> segment["Segment"]
    segmentAC -- is side of --> triangleABC["Triangle ABC"] & angleABC["Angle ABC"]
    segment -- directly refers to concet --> conceptSegment["Concept of a segment"]
    conceptSegment -- evokes --> conceptStraightLine["Concept of a straight line"]
    step1 -- states --> postulate2["Be postulated to produce a finite straight line upon a striaght line continuously"]
    step1 -- directly refers to concept --> conceptStraightLine
    conceptStraightLine -- specializes --> coonceptLine["Concept of a line"]
    coonceptLine -- evokes --> conceptPoint["Concept of a point"]
    definitionPoint["Definition of a point"] -- defines --> conceptPoint
    definitionPoint -- is in source --> elements["Euclid, Elements book I"]
    definitionPoint -- logically supports as its conceptual part --> defnitionLimitOfLine["Definition of the limit of a line"] & postulate1["Postulate 1"]
    postulate1 -- is in source --> elements
    postulate2 -- is in source --> elements
    defnitionLimitOfLine -- logically supports as its conceptual part --> postulate2
    is_produced_to--directly refers to act-->producing["Act of producing a segment"]
    producing--directly refers to-->conceptSegment
    producing--logically supports as its conceptual part-->postulate2
    segment--is subclass of-->properPortionOfLine["Proper portion of a line"]