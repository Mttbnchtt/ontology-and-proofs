prefix : <http://www.foom.com/pappus#> 
prefix owl: <http://www.w3.org/2002/07/owl#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix xml: <http://www.w3.org/XML/1998/namespace> 
prefix xsd: <http://www.w3.org/2001/XMLSchema#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 


# LOGIC

# is x is a proof step and has antecedent proof step y 
# and y is a step of proof z,
# then x is a step of proof z
[ ?x, <http://www.foom.com/core/inProof>, ?z ] :- 
    [ ?x, <http://www.foom.com/core/hasAntecedent>, ?y ] ,
    [ ?y, <http://www.foom.com/core/inProof>, ?z  ] .


# is x is a proof step and has antecedent proof step y 
# and x is a step of proof z,
# then y is a step of proof z
[ ?y, <http://www.foom.com/core/inProof>, ?z ] :- 
    [ ?x, <http://www.foom.com/core/hasAntecedent>, ?y ] ,
    [ ?y, <http://www.foom.com/core/inProof>, ?z  ] .

# if (x refers to concept y) and (y refers to concept z),
# then x refers to concept z
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000155>, ?z ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000155>, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000155>, ?z] .

# if (x is in proof step y) and (z defines x)
# and (z refers to logical element v), then v logically supports y
[ ?v, <http://www.foom.com/mathematical_concepts#00000000000000000111>, ?y ] :-
    [ ?x, <http://www.foom.com/core#00000000000000000035>, ?y ],
    [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000163>, ?x ],
    [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?v ] .

# if (x has antecendent y) and (z logically supports y),
# then z logically supports x
[ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000111>, ?x] :-
    [ ?x, <http://www.foom.com/core#00000000000000000186>, ?y],
    [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000111>, ?y] .

# if x has antecedent y, then y logically supports x
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000111>, ?y ] :- 
    [ ?y, <http://www.foom.com/core#00000000000000000186>, ?x ] .

# if (x uses definition y) and (y refers to logical element z), 
# then z logically supports x 
[ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000111>, ?x] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000184>, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?z ] .

# if x uses definition y, 
# then y logically supports as its conceptual part x
[ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000125>, ?x] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000184>, ?y]. 

# if x uses definition y and y refers to concept z,
# then x refers to concept z
[ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?x] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000184>, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?z ] .

# if x is a concept 
# and y is a subproperty of "refers to logical element"
# and z is a subclass of "y value x"
# and v is a z,
# then v y x
[ ?v, ?y, ?x ] :-
    [ ?x, a, <http://www.foom.com/core#00000000000000000004> ], # x is a concept
    [ ?y, rdfs:subPropertyOf, <http://www.foom.com/mathematical_concepts#00000000000000000185> ], # y is a subproperty of "refers to logical element"
    [ ?z, rdfs:subClassOf, ?z_1 ], # z is a subclass of an owl Restriction on property y with value x (part 1)
    [ ?z_1, a, owl:Restriction ], # z is a subclass of an owl Restriction on property y with value x (part 2)
    [ ?z_1, owl:onProperty, ?y ], # z is a subclass of an owl Restriction on property y with value x (part 3)
    [ ?z_1, owl:hasValue, ?x], # z is a subclass of an owl Restriction on property y with value x (part 4)
    [ ?v, a, ?z] . # v is a z

# if x "class has related concept" y,
# then x "directly refers to concept" y
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000147>, ?y ] :-
    [ ?x, <http://www.foom.com/core#00000000000000000156>, ?y] .

# if x "directly refers to concept" y,
# then x "class has related concept" y
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000156>, ?y ] :-
    [ ?x, <http://www.foom.com/core#00000000000000000147>, ?y] .

# if x x logically supports y as its specialization
# and z refers to x,
# then z refers to y
[ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?y ] :- # z refers to y
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000063>, ?y ], # x logically supports y as its specialization
    [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?x ] . # z refers to x

# if x logically supports y as its specialization,
# then y specializes x
[ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000110>, ?x ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000063>, ?y ] .

# if x logically supports y as its generalization,
# then x specializes y
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000110>, ?y ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000064>, ?y ] .

# if x is a y
# and y directly refers to concept z,
# then x directly refers to concept z
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000147>, ?z ] :-
    [ ?x, a, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000147>, ?z ] .

# if x is a y
# and y refers to action z,
# then x refers to action z
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000157>, ?z ] :-
    [ ?x, a, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000157>, ?z ] .

# if x is a y
# and y refers to object z,
# then x refers to object z
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000211>, ?z ] :-
    [ ?x, a, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000211>, ?z ] .

# if x is a y
# and y refers to proposition z,
# then x refers to proposition z
[ ?x, a, ?y ] :-
    [ ?x, a, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000210>, ?z ],
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000210>, ?z ]  .

# if x is a y
# and y refers to relation z,
# then x refers to relation z
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000214>, ?z ] :-
    [ ?x, a, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000214>, ?z ] .

# if x is a y
# and y refers to logical element z,
# then x refers to logical element z
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?z ] :-
    [ ?x, a, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?z ] .

# if x cites proposition y
# and y refers to logical element z,
# then x refers to logical element z
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?z ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000239>, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?z] .

# if x has object "is perfectly overlappable by rigid movement",
# then x refers to act type overlapping by rigid movement
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000220>, <http://www.foom.com/mathematical_concepts#00000000000000000243> ] :-
    [ ?x, <http://www.foom.com/core#00000000000000000088>, <http://www.foom.com/mathematical_concepts#00000000000000000097> ] .

# if x has object "is same amount as",
# then x refers to concept "equal amount"
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000220>, <http://www.foom.com/mathematical_concepts#00000000000000000243> ] :-
    [ ?x, <http://www.foom.com/core#00000000000000000088>, <http://www.foom.com/mathematical_concepts#00000000000000000076> ] .

# if x has object "is sum of",
# then x refers to concept "sum"
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000220>, <http://www.foom.com/mathematical_concepts#00000000000000000247> ] :-
    [ ?x, <http://www.foom.com/core#00000000000000000088>, <http://www.foom.com/mathematical_concepts#00000000000000000055> ] .

# if x specializes concept y,
# then x directly refers to y
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000147>, ?y ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000110>, ?y ], # x specializes y
    [ ?y, a, <http://www.foom.com/core#00000000000000000004> ] . # y is a concept

# if x generalizes concept y,
# then x directly refers to y
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000147>, ?y ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000109>, ?y ], # x generalizes y
    [ ?y, a, <http://www.foom.com/core#00000000000000000004> ] . # y is a concept

# if x logically supports y as its specialization,
# then x specializes y.
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000110>, ?y ] :-
    [?x, <http://www.foom.com/mathematical_concepts#00000000000000000063>, ?y]

# GEOMETRY

## CHECK
# if x is a triangle and y is a vertex of x and 
# z is a vertex of x and not (y = z),
# then yz is a side of x
# [   ] :-
#     [ ?x, rdf:type, <http://www.foom.com/mathematical_concepts#00000000000000000016> ],
#     [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000056>, ?x ],
#     [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000056>, ?x ],
#     not [ ?y, owl:sameAs, ?z ],
#     not [ ?z, owl:sameAs, ?y].

# if x is a side of y and y is a triangle, then x is a segment
[ ?x, rdf:type, <http://www.foom.com/mathematical_concepts#00000000000000000015> ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000074>, ?y ],
    [ ?y, rdf:type, <http://www.foom.com/mathematical_concepts#00000000000000000016> ].

# if x is a vertex of y and y is a triangle, then x is a point
[ ?x, rdf:type, <> ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000056>, ?y ], 
    [ ?y, rdf:type, <http://www.foom.com/mathematical_concepts#00000000000000000016> ].

# if x is a vertex of y, then x lies entirely on y
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000057>, ?y] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000056>, ?y ].

# if x is base of triangle y, then x is a side of y.
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000074>, ?y ] :-
    [?x, <http://www.foom.com/mathematical_concepts#00000000000000000033>, ?y ].

## CHECK
# if x and y are two vertices of a triangle and x != y, 
# then xy is a segment

## CHECK
# if x and y are two vertices of a triangle z and x != y, 
# then xy is a side of z


# if (x is an extremity of y) and (y is a segment), then
# x is a point
[ ?x, rdf:type, <http://www.foom.com/mathematical_concepts#00000000000000000024> ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000030>, ?y ],
    [ ?y, rdf:type, <http://www.foom.com/mathematical_concepts#00000000000000000015> ].


# if (x is an extremity of y) and (y is a segment), then
# x is lies entirely on y
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000057>, ?y ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000030>, ?y ],
    [ ?y, rdf:type, <http://www.foom.com/mathematical_concepts#00000000000000000015> ].

## CHECK
# if rectilinear angle x is perfectly overlappable by rigid movement to rectilinear angle y,
# then the amount of rotation of x is equivalent (as an amount) as the amount of rotation of y


# if x lies entirely on y
# and y is a plane
# and z lies entirely on x,
# then z lies entirely on y
[ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000057>, ?y] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000057>, ?y],
    [ ?y, rdf:type, <http://www.foom.com/mathematical_concepts#00000000000000000192> ],
    [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000057>, ?x].

# if y is a plane
# and x lies entirely on plane y
# and z lies entirely on plane y
# and v is determined by x
# and v is determined by z,
# then v lies entirely on plane y
[ ?v, <http://www.foom.com/mathematical_concepts#00000000000000000057>, ?y ] :-
    [ ?y, rdf:type, <http://www.foom.com/mathematical_concepts#00000000000000000192> ],
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000057>, ?y],
    [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000057>, ?y],
    [ ?v, <http://www.foom.com/mathematical_concepts#00000000000000000207>, ?x ],
    [ ?v, <http://www.foom.com/mathematical_concepts#00000000000000000207>, ?z ].




# ONTOLOGY

# (WRONG RULE) if P is a property, xPy, and x is in proof step z, 
# then y is in proof step z
# THIS RULE IS FALSE (e.g. consider P = different-from). HOWEVER, 
# THE RULE HOLDS FOR A LARGE CLASS OF PROPERTIES.
# BUT WHICH CLASS EXACTLY?

# (WRONG RULE) if P is a property, yPx, and x is in proof step z, 
# then y is in proof step z
# THIS RULE IS FALSE (e.g. consider P = different-from). HOWEVER, 
# THE RULE HOLDS FOR A LARGE CLASS OF PROPERTIES.
# BUT WHICH CLASS EXACTLY?


# HEURISTICS

# (PROBABLY WRONG) if x is specialization of y,
# then x inductively supports y


# (PROBABLY WRONG) if x is a y, 
# then x inductively supports y


# (WRONG )if (x P y) and (z P y) 
# and (P is a datatype property),
# then x is analogous to y


# (WRONG) if (x P y) and (z P y) 
# and (P is an object property),
# then x is analogous to y


# (WRONG) if x is a specialization of y, 
# then y is a conceptual part o x


# (WRONG) if x is a generalization of y, 
# then x is a conceptual part of x








