prefix : <http://www.foom.com/pappus#> 
prefix owl: <http://www.w3.org/2002/07/owl#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix xml: <http://www.w3.org/XML/1998/namespace> 
prefix xsd: <http://www.w3.org/2001/XMLSchema#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 


# LOGIC

# is x is a proof step and has antecedent proof step y 
# and y is a step of proof z,
# then x is a proof step  and it is a step of proof z


# is x is a proof step and has antecedent proof step y 
# and x is a step of proof z,
# then y is a proof step and it is a step of proof z

# if (x is in definition y) and (y is in definition z),
# then x is in definition y

# if (x is in proof step y) and (x has definition z)
# and (v is in definition z), then v logically supports y

# if (x has antecedent y) and (y has antecedent z), 
# then x has antecedent z

# if (x has antecendent y) and (z logically supports y),
# then z logically supports x

# if x has antecedent y, then y logically supports x

# if (x has definition y) and (z is in definition y), 
# then z logically supports x 


# GEOMETRY

# if x is a triangle and y is a vertex of y and 
# z is a vertex of z and not (y = z),
# then yz is a side of x


# if x is a side of y and y is a triangle, then x is a segment


# if x is isosceles, then x is a triangle


# if x is a vertex of y and y is a triangle, then x is a point


# if x is a vertex of y, then x lies on y


# if segment x is base of triangle y, then x is a side of y.

# is x and y are two vertices of a triangle and x != y, 
# then xy is a segment


# is x and y are two vertices of a triangle z and x != y, 
# then xy is a side of z


# if x is an extremity of segment y, then
# x is a point


# if x is an extremity of segment y, then
# x is lies on y

# if rectilinear angle x is perfectly overlappable by rigid movement to rectilinear angle y,
# then the amount of rotation of x is equivalent (as an amount) as the amount of rotation of y

# ONTOLOGY

# (NOT SURE) if P is a property, xPy, and x is in proof step z, 
# then y is in proof step z


# (NOT SURE) if P is a property, yPx, and x is in proof step z, 
# then y is in proof step z


# HEURISTICS

# if x is specialization of y,
# then x inductively supports y


# if x is generalization of y,
# then y is a specialization of x


# if x is a y, 
# then x inductively supports y


# if (x p y) and (z p y) 
# and (p is a datatype property),
# then x is analogous to y


# if (x p y) and (z p y) 
# and (p is an object property),
# then x is analogous to y










