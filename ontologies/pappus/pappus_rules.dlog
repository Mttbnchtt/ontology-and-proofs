prefix : <http://www.foom.com/pappus#> 
prefix owl: <http://www.w3.org/2002/07/owl#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix xml: <http://www.w3.org/XML/1998/namespace> 
prefix xsd: <http://www.w3.org/2001/XMLSchema#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 


# LOGIC

# is x is a proof step and has antecedent proof step y 
# and y is a step of proof z,
# then x is a step of proof z
[ ?x, <http://www.foom.com/core/inProof>, ?z ] :- 
    [ ?x, <http://www.foom.com/core/hasAntecedent>, ?y ] ,
    [ ?y, <http://www.foom.com/core/inProof>, ?z  ] .


# is x is a proof step and has antecedent proof step y 
# and x is a step of proof z,
# then y is a step of proof z
[ ?y, <http://www.foom.com/core/inProof>, ?z ] :- 
    [ ?x, <http://www.foom.com/core/hasAntecedent>, ?y ] ,
    [ ?y, <http://www.foom.com/core/inProof>, ?z  ] .

# if (x refers to concept y) and (y refers to concept z),
# then x refers to concept y
[ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000155>, ?z ] :-
    [ ?x, <http://www.foom.com/mathematical_concepts#00000000000000000155>, ?y ],
    [ ?y, <http://www.foom.com/mathematical_concepts#00000000000000000155>, ?z]

# if (x is in proof step y) and (z defines x)
# and (z refers to logical element v), then v logically supports y
[ ?v, <http://www.foom.com/mathematical_concepts#00000000000000000111>, ?y ] :-
    [ ?x, <http://www.foom.com/core#00000000000000000035>, ?y ],
    [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000163>, ?x ],
    [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000185>, ?v ]

# if (x has antecendent y) and (z logically supports y),
# then z logically supports x
[ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000111>, ?x] :-
    [ ?x, <http://www.foom.com/core#00000000000000000186>, ?y],
    [ ?z, <http://www.foom.com/mathematical_concepts#00000000000000000111>, ?y]

# if x has antecedent y, then y logically supports x

# if (x has definition y) and (z is in definition y), 
# then z logically supports x 

# if x uses definition y, 
# then y logically supports as its conceptual part x

# if x uses definition y and y refers to concept z,
# then x refers to concept z

# GEOMETRY

# if x is a triangle and y is a vertex of y and 
# z is a vertex of z and not (y = z),
# then yz is a side of x


# if x is a side of y and y is a triangle, then x is a segment


# if x is isosceles, then x is a triangle


# if x is a vertex of y and y is a triangle, then x is a point


# if x is a vertex of y, then x lies on y


# if segment x is base of triangle y, then x is a side of y.

# is x and y are two vertices of a triangle and x != y, 
# then xy is a segment


# is x and y are two vertices of a triangle z and x != y, 
# then xy is a side of z


# if x is an extremity of segment y, then
# x is a point


# if x is an extremity of segment y, then
# x is lies on y

# if rectilinear angle x is perfectly overlappable by rigid movement to rectilinear angle y,
# then the amount of rotation of x is equivalent (as an amount) as the amount of rotation of y

# if x lies entirely on plane y
# and z lies entirely on x,
# then x lies entirely on y

# if x lies entirely on plane y
# and z lies entirely on plane y
# and v is determined by x
# and v is determined by y,
# then v lies entirely on plane y


# ONTOLOGY

# (NOT SURE) if P is a property, xPy, and x is in proof step z, 
# then y is in proof step z


# (NOT SURE) if P is a property, yPx, and x is in proof step z, 
# then y is in proof step z


# HEURISTICS

# if x is specialization of y,
# then x inductively supports y


# if x is generalization of y,
# then y is a specialization of x


# if x is a y, 
# then x inductively supports y


# if (x p y) and (z p y) 
# and (p is a datatype property),
# then x is analogous to y


# if (x p y) and (z p y) 
# and (p is an object property),
# then x is analogous to y


# if x is a specialization of y, 
# then y is a conceptual part o x


# if x is a generalization of y, 
# then x is a conceptual part of x








